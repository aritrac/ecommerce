{
  "_args": [
    [
      {
        "raw": "spinner",
        "scope": null,
        "escapedName": "spinner",
        "name": "spinner",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/ec2-user/environment/ecommerce"
    ]
  ],
  "_from": "spinner@latest",
  "_id": "spinner@0.3.4",
  "_inCache": true,
  "_location": "/spinner",
  "_phantomChildren": {},
  "_requested": {
    "raw": "spinner",
    "scope": null,
    "escapedName": "spinner",
    "name": "spinner",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/spinner/-/spinner-0.3.4.tgz",
  "_shasum": "a0c5413b9b0ab8b67e3e0994f6cef0afa0bf6c3c",
  "_shrinkwrap": null,
  "_spec": "spinner",
  "_where": "/home/ec2-user/environment/ecommerce",
  "author": {
    "name": "Elad Ben-Israel",
    "email": "elad.benisrael@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/eladb/node-spinner/issues"
  },
  "contributors": [],
  "dependencies": {
    "async": "0.1.x",
    "ctxobj": "0.2.x",
    "fsmjs": "0.2.x",
    "node-uuid": "1.3.3",
    "portscanner": "0.1.x"
  },
  "description": "Spawns child processes and allocates `process.env.PORT` for each.",
  "devDependencies": {
    "logule": "0.5.x",
    "nodeunit": "0.6.x",
    "request": "2.9.x"
  },
  "directories": {},
  "dist": {
    "shasum": "a0c5413b9b0ab8b67e3e0994f6cef0afa0bf6c3c",
    "tarball": "https://registry.npmjs.org/spinner/-/spinner-0.3.4.tgz"
  },
  "engines": {
    "node": ">=0.6.6"
  },
  "homepage": "https://github.com/eladb/node-spinner#readme",
  "keywords": [
    "spawn",
    "child",
    "port",
    "allocation"
  ],
  "license": "MIT",
  "main": "./main",
  "maintainers": [
    {
      "name": "eladb",
      "email": "elad.benisrael@gmail.com"
    },
    {
      "name": "yosefd",
      "email": "yosefd@microsoft.com"
    }
  ],
  "name": "spinner",
  "optionalDependencies": {},
  "readme": "# spinner #\n\n[![Build Status](https://secure.travis-ci.org/eladb/node-spinner.png)](http://travis-ci.org/eladb/node-spinner)\n\nSpawns child processes with dynamic port allocation and other goodies. Sort of like [forever](https://github.com/nodejitsu/forever) but with a few more features.\n \n * Allocates ports dynamically and hands them over child processes via the `PORT` \n   environment variable\n * Respawn processes that decided to go to bed\n * Stateless API for a pretty stateful module (uses [fsmjs](https://github.com/anodejs/node-fsmjs)).\n * Monitor a file/directory and restart the child if changed\n * If a child was not 'touched' for some time, automatically stop it\n\n```bash\n$ npm install spinner\n```\n\n#### myapp.js ####\n\n```js\nvar http = require('http');\n\nconsole.log('[myapp] Started on port %s', process.env.port || 5000);\n\nhttp.createServer(function(req, res) {\n  console.log('[myapp] %s %s', req.method, req.url);\n  res.end('hello, world');\n}).listen(process.env.port || 5000);\n```\n\nThis is a simple node.js HTTP server that binds to `process.env.port`.\nIt emits some logs which will be piped into the server's stdio streams.\n\n#### server.js ####\n\n```js\nvar http = require('http');\nvar spinner = require('spinner').createSpinner();\n\nspinner.start('./myapp.js', function(err, socket) {\n\n  var req = http.request({ socketPath: socket });\n\n  req.on('response', function(res) {\n    console.log('[server] HTTP %d %s', res.statusCode, http.STATUS_CODES[res.statusCode]);\n\n    res.on('data', function(data) {\n      console.log('[server] DATA <' + data.toString() + '>');\n    });\n\n    res.on('end', function() {\n      spinner.stop('./myapp.js');\n    });\n  });\n\n  req.end();\n});\n```\n\nThe server creates a spinner and starts `./myapp.js`. The callback receives a `socket` parameter\nwith the unix domain socket (or named pipe in Windows) path. Then, it uses node's `http` module to\nissue an HTTP request into this pipe.\n\nOutput:\n\n```bash\n$ node server.js\n[myapp] Started on port /tmp/ed929e3c521e4004bb93c59a65c968b2\n[myapp] GET /\n[server] HTTP 200 OK\n[server] DATA <hello, world>\n```\n\n## API ##\n\n### createSpinner(globalOptions) ##\n\nReturns a spinner. Within a spinner namespace, child processes are identified by name and only \na single child can exists for every name.\n\nThis means that if I call `spinner.start('foo')` twice, only a single child will be spawned. The second call will return the same port.\n\n`globalOptions` may contain any of the options passed along to \n`spinner.start()` (except `name` and `args`) and used as defaults options\nfor `spinner.start`.\n\n### spinner.start(options, callback) ###\n\n```js\n// Name of child. Basically a key used to identify the child process\nname: 'foofoo',\n\n// Program to execute (default is `process.execPath`, which is node.js)\ncommand: process.execPath,\n\n// Array of arguments to use for spawn\nargs: [ './myapp.js' ],\n\n// Environment variables for spawned process\nenv: { myenv: '1234' },\n\n// working directory to spawn the app (default null)\ncwd: null,\n\n// Logger to use (default is `console`)\nlogger: console,\n\n// Timeout in seconds waiting for the process to bind to the\n// allocated port (default is 30 seconds)\ntimeout: 30,\n\n// Number of attempts to start the process. After this, spinner will not \n// fail on every `start` request unless a `stop` is issued (default is 3).\nattempts: 3,\n\n// Timeout in seconds to wait for a child to stop before issuing a \n// SIGKILL (default is 30 sec)\nstopTimeout: 30,\n\n// Path of file or directory to monitor for changes. When the monitor \n// indicates a change, the child will be restarted. Default is null \n// (no monitor). file must exist when the child is first started.\nmonitor: './lazykiller.js',\n\n// Stream to pipe process stdout to (default is process.stdout). Use `null` to disable.\nstdout: process.stdout,\n\n// Stream to pipe process stderr to (default is process.stderr). Use `null` to disable.\nstderr: process.stderr,\n\n// Idle time: if `spinner.start` is not called for this process within this time,\n// spinner will automatically stop the process. Use `-1` to disable (default is 30 minutes).\nidleTimeSec: 30 * 60,\n\n// Number of seconds allowed between unexpected restarts of a child process. If a restart\n// happens within less time, the child will be become faulted.\nrestartTolerance: 60,\n\n// Number of seconds child process is not restarted when it is faulted. If child process\n// started again after this timeout expired, another attempt to spawn it will be made.\nfaultTimeout: 60\n\n```\n\nThe argument `callback` is `function(err, port)` where `port` is the port number allocated for this child process and set in it's `PORT` environment variable (in node.js: `process.env.PORT`). If the child could not be started or if it did not bind to the port in the alloted `timeout`, `err` will indicate that with an `Error` object.\n\n### spinner.start(script, callback) ###\n\nA short form for `spinner.start()` where `script` is used as the first argument to the node engine prescribed in `process.execPath` and also used as the name of the child.\nMonitor is also set to point to the script, so if it changes, the child will be \nrestarted (unless `monitor` is set to `null` in the global options).\n\n### spinner.stop(name, callback) ###\n\nStops the child keyed `name`. `callback` is `function(err)`.\nSpinner sends `SIGTERM` and after `stopTimeout` passes, sends `SIGKILL`.\n\n### spinner.stopall(callback) ###\n\nStops all the child processes maintained by this spinner.\n\n`callback` is `function(err)`\n\n### spinner.get(name) ###\n\nReturns information about a child process named `name`. The information includes the options\nused to start the child process and a `state` property indicating the current state of the\nchild.\n\nPossible states are:\n\n * __stopped__ - Child is stopped.\n * __starting__ - Child is being spawned and waiting for port to be bound to.\n * __started__ - Child is started.\n * __stopping__ - Child is being stopped.\n * __faulted__ - Child is faulted. That is, the alloted number of start requests failed.\n * __restart__ - Child is being restarted.\n\n### spinner.list() ###\n\nReturns the list of child processes maintained by this spinner. The result is a hash\nkeyed by the child name and contains the details from `spinner.get()`.\n\n### Event: 'started' ###\n\n```function(port) {}```\n\nEmitted after the child process has been started and bound to `port`. This means it can\nbe accessed from now on via ```{ host: 'localhost', port: port }```.\n\n### Event: 'stopped' ###\n\n```function() {}```\n\nEmitted after the child process has been stopped.\n\n### Event: 'restarted' ###\n\n```function(port) {}```\n\nEmitted after the child process has been restarted (either due to a file change or due\nto a crash).\n\n### Event: 'error' ###\n\n```function(e) {}```\n\nEmitted when an error occured while starting the child process.\n\n\n## License ##\n\nMIT\n\n## Contributors ##\n\nOriginally forked from forked from [nploy](https://github.com/stagas/nploy) by George Stagas (@stagas), but since I had to work out the crazy state machine, not much code of `nploy` let. Neverthess, it's an awesome lib.",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/eladb/node-spinner.git"
  },
  "scripts": {
    "test": "nodeunit test/*.test.js"
  },
  "version": "0.3.4"
}
