{
  "_args": [
    [
      {
        "raw": "ctxobj@0.2.x",
        "scope": null,
        "escapedName": "ctxobj",
        "name": "ctxobj",
        "rawSpec": "0.2.x",
        "spec": ">=0.2.0 <0.3.0",
        "type": "range"
      },
      "/home/ec2-user/environment/ecommerce/node_modules/spinner"
    ]
  ],
  "_from": "ctxobj@>=0.2.0 <0.3.0",
  "_id": "ctxobj@0.2.1",
  "_inCache": true,
  "_location": "/ctxobj",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ctxobj@0.2.x",
    "scope": null,
    "escapedName": "ctxobj",
    "name": "ctxobj",
    "rawSpec": "0.2.x",
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/spinner"
  ],
  "_resolved": "https://registry.npmjs.org/ctxobj/-/ctxobj-0.2.1.tgz",
  "_shasum": "2fc94c21adcaea9c52e37cfa0b3c535d541770c8",
  "_shrinkwrap": null,
  "_spec": "ctxobj@0.2.x",
  "_where": "/home/ec2-user/environment/ecommerce/node_modules/spinner",
  "author": {
    "name": "Elad Ben-Israel",
    "email": "elad.benisrael@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/anodejs/node-ctxobj/issues"
  },
  "contributors": [],
  "dependencies": {},
  "description": "Objects with immutable context, especially good for contextual logging",
  "devDependencies": {
    "nodeunit": "0.6.x"
  },
  "directories": {},
  "dist": {
    "shasum": "2fc94c21adcaea9c52e37cfa0b3c535d541770c8",
    "tarball": "https://registry.npmjs.org/ctxobj/-/ctxobj-0.2.1.tgz"
  },
  "engines": {
    "node": ">=0.6.6"
  },
  "homepage": "https://github.com/anodejs/node-ctxobj#readme",
  "keywords": [
    "context",
    "immutable",
    "logging",
    "console",
    "log"
  ],
  "license": "MIT",
  "main": "./main",
  "maintainers": [
    {
      "name": "eladb",
      "email": "elad.benisrael@gmail.com"
    },
    {
      "name": "yosefd",
      "email": "yosefd@microsoft.com"
    }
  ],
  "name": "ctxobj",
  "optionalDependencies": {},
  "readme": "# ctxobj #\n\n[![Build Status](https://secure.travis-ci.org/anodejs/node-ctxobj.png)](http://travis-ci.org/anodejs/node-ctxobj)\n\nAdds immutable context to objects. Good for contextual logging.\n\n## ctxobj.new(obj) ##\n\nDecorates `obj` with a context. `pushctx` or `popctx` will create a child-object with the extended context.\nChild objects maintains an invisible link to parents.\n\n```nodejs\nvar ctxobj = require('../main');\n\n// just an object\nvar obj0 = { x: 1, y: { val: 2 } }\n\n// decorate with context\nvar obj1 = ctxobj.new(obj0)\n\n// create child objects by pushing and poping data to the context\nvar obj2 = obj1.pushctx('c1')\nvar obj3 = obj2.pushctx('c2a').pushctx('c2b')\nvar obj4 = obj1.pushctx('c3')\nvar obj5 = obj3.popctx().popctx();\n\n// this will only change 'x' on obj5\nobj5.x = 99;\n\n// this will change y.val on all the objects (because we are not setting `y` itself)\nobj5.y.val = 99;\n```\n\nOutput:\n\n```js\nobj0 --> { x: 1,  y: { val: 99 }, ctx: undefined }\nobj1 --> { x: 1,  y: { val: 99 }, ctx: [] }\nobj2 --> { x: 1,  y: { val: 99 }, ctx: [ 'c1' ] }\nobj3 --> { x: 1,  y: { val: 99 }, ctx: [ 'c1', 'c2a', 'c2b' ] }\nobj4 --> { x: 1,  y: { val: 99 }, ctx: [ 'c3' ] }\nobj5 --> { x: 99, y: { val: 99 }, ctx: [ 'c1' ] }\n```\n\n## ctxobj.console(console) ##\n\nDecorates console-like objects with a context that is prepended to each `console.xxx()` call.\n\n```node.js\nvar ctxobj = require('ctxobj');\n\nvar log0 = ctxobj.console(console);\nlog0.info('no context yet');\n\nvar i = 0;\nvar log1 = log0.pushctx('c1').pushctx(function() { return i++; });\nlog1.warn('now with a two items in the context');\nlog1.info('yo yo yo');\n\nvar log2 = log1.popctx();\nlog2.error('only one item in the context now');\n```\n\nOutput:\n\n```\nno context yet\n[c1] [0] now with a two items in the context\n[c1] [1] yo yo yo\n[c1] only one item in the context now\n```\n\nSome sugar:\n\n### ctxobj.timestamp() ###\nPushes a timestamp function to the context\n\n### ctxobj.stacktop(skip) ###\nPushes file name and line number of log line to the context (skipping `skip` frames).\n\n## ctxobj.object(parent) ##\n\nCreates a child object from to `parent`. The child object is linked to that parent object\nvia it's prototype, so properties of the parent object are available through the child.\n\nInspired by Douglas Crockfordâ€™s [parasitic inheritence](http://www.crockford.com/javascript/inheritance.html).\n\n## Licence ##\n\nMIT",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/anodejs/node-ctxobj.git"
  },
  "scripts": {
    "test": "nodeunit test/*.test.js"
  },
  "version": "0.2.1"
}
